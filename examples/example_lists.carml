
let rec length l =
  match l with
  | _ :: t -> 1 + (length t)
  | [] -> 0


let rec zip l1 l2 =
  match (l1, l2) with
  | (h::t, h'::t') -> (h, h') :: (zip t t')
  | ([], []) -> []


let rec map l f =
  match l with
  | h :: t -> (f h) :: (map t f)
  | [] -> []


let l2 = map [1; 2; 3] (fun f -> true)

let rec _reverse l acc =
  match l with
  | h :: t -> _reverse t (h :: acc)
  | [] -> acc


let reverse l = _reverse l []

let l = [1; 2; 3]
let rev_l = reverse l
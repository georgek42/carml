let a: int = false;;
let b: bool = 1.234;;
let f: float = "1.234";;
let c: char = "a";;
let s: string = 'a';;

let t: int * int = [1; 2];;
let t: int * (secret(int) list) = ("abc", [1; 2; 3]);;
let t: (int -> int) * string = (fun a: int -> int ->> a, fun a b: int -> int -> int ->> a + b);;
let t: (secret(int) * bool) * string * bool = (
  (1234, true),
  "1234"
);;

let l: int list = ['a'; 'b'; 'c'];;
let l: int list = [1; 2; 'a'];;

let fst l: int list -> int =
  match l with
  | h :: t: int list ->> h
  | []: int list ->> 0
;;

let a: bool = fst l;;

let a: int = (fun a: int -> bool ->> a < 0) 12;;

let add a b: int -> int = a + b;;
let add a b: int -> int -> bool = a + b;;

let tuple_equal t1 t2: int * int -> int * int -> bool =
  match (t1, t2) with
  | ((a, (b, c)), (a', b')): int * int ->> a = a' && b = b'
  | (_, _): (int * int) * (int * int) ->> false
;;

let tuple_equal t1 t2: int * int -> int * int -> bool =
  match (t1, t2) with
  | ((a, b), (a', b')): (int * int) * (int * int) ->> a a'
  | (_, _): (int * int) * (int * int) ->> false
;;

let t: int * (int * int) = (1, 2, 3);;
let t: int * (int * int) = (1, 2, 3);;

let username: secret(string) = "password";;
let password: string = "username";;

let print_plain s: string -> unit = s; ();;
let print_secret s: secret(string) -> unit = s; ();;

let u: unit = print_secret password;;
let u: unit = print_plain username;;
let f a: int -> int = a + b;;
let f: int -> int =
  fun a: int -> int ->> a + b;;


let print_string str: string -> unit = print (str: string);;
let print_int a: int -> unit = print (a: int);;

let f a b: int -> int -> unit =
  let c: int = a + b in
  print_int (c: int);;

let f a b: int -> int -> unit =
  let c: int = a + b in
  let d: int = c - a in
  let e: int = c - b in
  match d = b && e = a with
  | true: bool ->> print_string ("ok": string)
  | false: bool ->> print_string ("error": string)
;;

let c: unit = f (1: int) (2: int);;
let c: unit = f ((1 + 2): int) (2: int);;

let y: int = (fun x: int -> int ->> x + 1) (1: int);;

let map f l: int -> int -> int list -> int list =
  match l with
  | h :: t: int list ->> (f (h: int)) :: (map (f: int -> int) (t: int list))
  | []: int list ->> []
;;
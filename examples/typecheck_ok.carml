let a: int = 1234;;
let b: bool = true;;
let f: float = 1.234;;
let c: char = 'a';;
let s: string = "hello, world";;

let t: int * int = (1, 2);;
let t: int * (secret(int) list) = (1, [1; 2; 3]);;
let t: (int -> int) * string = (fun a: int -> int ->> a, "a");;
let t: (secret(int) * bool) * string = (
  (1234, true),
  "1234"
);;

let add a b: int -> int -> bool = a < b;;

let tuple_equal t1 t2: (int * int) -> (int * int) -> bool =
  match (t1, t2) with
  | ((a, b), (a', b')): (int * int) * (int * int) ->> a = a' && b = b'
  | (_, _): (int * int) * (int * int) ->> false
;;

let t: int * int * int = (1, 2, 3);;
let t: int * (int * int) = (1, (2, 3));;

let password: secret(string) = "password";;
let username: string = "username";;

let print_plain s: string -> unit = s; ();;
let print_secret s: secret(string) -> unit = s; ();;

let u: unit = print_secret (password: secret(string));;
let u: unit = print_plain (username: string);;

let rec length l: int list -> int =
  match l with
  | _ :: t: int list ->> 1 + (length (t: int list))
  | []: int list ->> 0
;;

let rec rev l: int list -> int list =
  match l with
  | h :: t: int list ->> (rev (t: int list)) :: ([h])
  | []: int list ->> []
;;

let rec length: int list -> int =
  fun l: int list -> int list ->>
  match l with
  | _ :: t: int list ->> 1 + (length (t: int list))
  | []: int list ->> 0
;;

let rec rev: int list -> int list =
  fun l: int list -> int list ->>
  match l with
  | h :: t: int list ->> (rev (t: int list)) :: ([h])
  | []: int list ->> []
;;